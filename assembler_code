.data

	operationPrompt: .asciiz "Choose operation (encryption: 0 decryption: 1) "
	encTextPrompt: .asciiz "Type in the message you want to encrypt(max. 16 characters)"
	decTextPrompt: .asciiz "Type in the message you want to decrypt(max. 16 characters)"
	userInputText: .space 16
	userInputKey: .space 8
	keyPrompt: .asciiz "Type in the key(max. 8 characters)"
	encText: .asciiz "The encrypted message: "
	decText: .asciiz "The decrypted message: "
	ifContinue: .asciiz "\n\n Do you want to continue? Yes: 1 No: 0\n”

.text

	main:
	
	while:
	
		#asks for the operation
		li $v0, 4
		la $a0, operationPrompt
		syscall
	
		#takes the input (0 or 1)
		li $v0, 5
		syscall
	
		#saves the input in the $t0 register
		move $t0, $v0
		
		#checks which operation the user has chosen and continues according to the operation
		beq $t1, 0, encrypt
		beq $t1, 1, decrypt
		
		
		continue:
		
		#asks the user whether to continue
		li $v0, 4
		la $a0, ifContinue
		syscall
		
		#takes the answer
		li $v0, 5
		syscall
		
		#saves the answer in the $t0 register
		move $t0, $v0
		
		#exits or continues the programme
		beq $t0, 0, exit
		beq $t0, 1, while
		

	exit:
		#end of the programme
		li $v0, 10
		syscall
		
	encrypt:
	
		#asks for the message
		li $v0, 4
		la $a0, encTextPrompt
		syscall
		
		#gets the input from the user
		li $v0, 8
		la $a0, userInputText
		li $a1, 16
		syscall
		
		#saves the input in the $t0 register
		move $t0, $a0
		
		#asks for the key
		li $v0, 4
		la $a0, keyPrompt
		syscall
		
		#gets the input from the user
		li $v0, 8
		la $a0, userInputKey
		li $a1, 8
		syscall
		
		#saves the input in the $t0 register
		move $t1, $a0
		
		#prints the message
		li $v0, 4
		move $a0, $t0
		syscall
		
		#prints the key
		li $v0, 4
		move $a0, $t1
		syscall
		
		j addNumbers
		
		j continue
		
	decrypt:
	
		#asks for the message	
		li $v0, 4
		la $a0, decTextPrompt
		syscall
		
		#gets the input from the user
		li $v0, 8
		la $a0, userInputText
		li $a1, 16
		syscall
	
		#saves the input in the $t0 register
		move $t0, $a0
		
	
		j exit
	
	addNumbers:

  
		while2:
		bgt $t1, 4, resetKeyCounter #jeśli program przeszedł przez klucz, zapętl go
		bgt $t0, 16, exit	   #jeśli program preszedł przez cąły tekst, zakończ go

   		lb  $a0, userInputText($t0)	   #załaduj kolejną literę tekstu
   		lb $a1, userInputKey($t1)	# załaduj kolejną literę klucza
   	
   		add $t2, $a0, $a1	# dodaj reprezentację  litery klucza i litery tekstu
		
		sub $t3, $t2, 194
		
		li $v0, 1
 		move $a0, $t3
 		syscall

		
   		addi, $t0, $t0, 1
   		addi, $t1, $t1, 1
   	 
   		j while2
  
   resetKeyCounter:
   
   	
	
   	addi $t1, $zero, 0
   	 
   	j while2

